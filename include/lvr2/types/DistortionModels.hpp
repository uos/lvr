/// @file DistortionModels.hpp
/// @author Justus Braun (jubraun@uos.de)
/// @brief This file contains distortion models which model lens distortion of real cameras.
#pragma once
#ifndef LVR2_TYPES_DISTORTION_MODELS_HPP
#define LVR2_TYPES_DISTORTION_MODELS_HPP

#include <lvr2/types/MatrixTypes.hpp>

namespace lvr2
{

struct DistortionModelInterface
{
    /// @brief Distorts a point using the internal distortion model
    /// @param p The point to distort in normalized image coordinates (x and y in [-1, 1])
    /// @return The distorted point in normalized image coordinates
    virtual Vector2d distortPoint(const Vector2d& p) const = 0;

    /// @brief Access to the internal distortion coefficients used for serialization
    /// @return A const reference to the internal distortion coefficients vector
    virtual const std::vector<double>& coefficients() const = 0;

    /// @brief Access to the name of the distortion model used for serialization
    /// @return A std::string containing the model name
    virtual std::string name() const = 0;
};


/// @brief A Wrapper for all distortion models enabling value semantics
struct DistortionModel
{
    /// @brief A constructor creating the wrapper
    /// @tparam ModelT The type of the Model to wrap. Model must inherit from DistortionModelInterface!
    /// @param model The model object to wrap.
    template <typename ModelT>
    DistortionModel(const ModelT& model);

    /// @brief Move constructor creating the wrapper
    /// @tparam ModelT Type of the model to wrap
    /// @param model The model to move from
    template <typename ModelT>
    DistortionModel(std::remove_reference_t<ModelT>&& model);

    /// @brief Default constructor, initializes to UnknownDistortion
    DistortionModel();

    /// @brief Copy constructor
    /// @param other The DistortionModel to copy
    DistortionModel(const DistortionModel& other);

    /// @brief Move constructor
    /// @param other The DistortionModel to move from
    DistortionModel(DistortionModel&& other);

    /// @brief Distorts a point using the internal distortion model
    /// @param p The point to distort in normalized image coordinates (x and y in [-1, 1])
    /// @return The distorted point in normalized image coordinates
    inline Vector2d distortPoint(const Vector2d& p) const;

    /// @brief Access to the internal distortion coefficients used for serialization
    /// @return A const reference to the internal distortion coefficients vector
    inline const std::vector<double>& coefficients() const;

    /// @brief Access to the name of the distortion model used for serialization
    /// @return A std::string containing the model name
    inline std::string name() const;

    /// @brief Copy assignment operator
    /// @param other The DistortionModel to copy
    /// @return A reference to this
    DistortionModel& operator=(const DistortionModel& other);

    /// @brief Move assignment operator
    /// @param other The DistortionModel to move from
    /// @return A reference to this
    DistortionModel& operator=(DistortionModel&& other);

    /// @brief Creates the distortion model indicated by name
    /// @param name The name of the distortion model to create
    /// @param coefficients The distortion coefficients of the model
    static DistortionModel fromName(const std::string& name, const std::vector<double>& coefficients);

private:

    /// @brief Basically the DistortionModelInterface + a clone function which will be generated by the compiler for each Model
    struct Concept: DistortionModelInterface
    {
        virtual std::unique_ptr<Concept> clone() const = 0;
    };

    template <typename Impl>
    struct Model: Concept
    {
        Model(const std::remove_reference_t<Impl>& obj);

        Model(std::remove_reference_t<Impl>&& obj);
        
        std::unique_ptr<Concept> clone() const;
        
        Vector2d distortPoint(const Vector2d& p) const override;

        const std::vector<double>& coefficients() const override;

        std::string name() const override;

        Impl obj_;
    };

    // The contained model
    std::unique_ptr<Concept> impl_;
};

/// @brief Represents an unknown distortion model
struct UnknownDistortion: DistortionModelInterface
{
    UnknownDistortion(const std::vector<double>& coeffs);
    UnknownDistortion() = default;
    UnknownDistortion(const UnknownDistortion&) = default;
    UnknownDistortion(UnknownDistortion&&) = default;
    UnknownDistortion& operator=(const UnknownDistortion&) = default;
    UnknownDistortion& operator=(UnknownDistortion&&) = default;

    static constexpr char type[] = "unknown";

    inline lvr2::Vector2d distortPoint(const lvr2::Vector2d& p) const override;

    inline std::string name() const override;

    inline const std::vector<double>& coefficients() const override;

    std::vector<double> coefficients_;
};

/// @brief Implementation of the riegl distortion model
struct RieglDistortion: DistortionModelInterface
{
    RieglDistortion(const std::vector<double>& coeffs);
    RieglDistortion() = default;
    RieglDistortion(const RieglDistortion&) = default;
    RieglDistortion(RieglDistortion&&) = default;
    RieglDistortion& operator=(const RieglDistortion&) = default;
    RieglDistortion& operator=(RieglDistortion&&) = default;

    static constexpr char type[] = "riegl";

    inline lvr2::Vector2d distortPoint(const lvr2::Vector2d& p) const override;

    inline std::string name() const override;

    inline const std::vector<double>& coefficients() const override;

    std::vector<double> coefficients_;
};

struct OpenCVDistortion: DistortionModelInterface
{
    OpenCVDistortion(const std::vector<double>& coeffs);
    OpenCVDistortion() = default;
    OpenCVDistortion(const OpenCVDistortion&) = default;
    OpenCVDistortion(OpenCVDistortion&&) = default;
    OpenCVDistortion& operator=(const OpenCVDistortion&) = default;
    OpenCVDistortion& operator=(OpenCVDistortion&&) = default;

    static constexpr char type[] = "opencv";

    inline lvr2::Vector2d distortPoint(const lvr2::Vector2d& p) const override;

    inline std::string name() const override;

    inline const std::vector<double>& coefficients() const override;

    std::vector<double> coefficients_;
};

} // namespace lvr2

#include "DistortionModels.tcc"

#endif // LVR2_TYPES_DISTORTION_MODELS_HPP